<?php

/**
 * forward等で複数回アクションが実行されるような場合でも、処理を一度だけ行うようなフィルタの基底クラス。
 */
abstract class WideFilter extends Filter {

    //-----------------------------------------------------------------------------------------------------
    /**
     * アクションの実行に入る前に処理を行う。
     * 必要があればオーバーライドする。
     */
    protected function preProcess() {
    }


    //-----------------------------------------------------------------------------------------------------
    /**
     * アクションの実行後に処理を行う。
     * 必要があればオーバーライドする。
     */
    protected function postProcess() {
    }


    // あとはオーバーライド用ではない。
    //=====================================================================================================

    private $callCount = 0;

    //-----------------------------------------------------------------------------------------------------
    /**
     * executeを実装
     */
    public function execute ($filterChain) {

        // 最初にコールされたならば前処理を行う。
        if($this->callCount == 0)
            $this->preProcess();

        // アクションが複数回実行された場合に対処できるようにカウンタを管理しておく。
        $this->callCount++;

        // 次のフィルタへ。
        $e = null;
        try {
            $filterChain->execute();
        }catch(Exception $e) {
        }

        // すべてのアクションが終わったなら後処理を行う。
        $this->callCount--;
        if($this->callCount == 0)
            $this->postProcess();

        // 例外で戻ってきているならそのまま伝播する。
        if($e)
            throw $e;
    }
}
